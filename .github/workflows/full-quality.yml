name: Full Quality Check

on:
    pull_request:
        branches:
            - main
    workflow_dispatch:

jobs:
    backend-full:
        name: Backend Full Quality Check
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./backend
        steps:
            - uses: actions/checkout@v4
            - name: Set up Java
              uses: actions/setup-java@v4
              with:
                java-version: '17'
                distribution: 'temurin'
                cache: maven
                
            - name: Run Backend Unit Tests
              run: mvn test -Dtest='*UnitTest'
              
            - name: Run Backend Integration Tests
              run: mvn test -Dtest='*IntegrationTest'
            
            - name: Start services for E2E tests
              run: |
                cd ..  # Volver al directorio raíz donde está el docker-compose.yml
                docker-compose up -d
                
            - name: Wait for services to be ready
              run: |
                cd ..
                # Esperar a que MySQL esté listo
                echo "Esperando a MySQL..."
                timeout 120 bash -c 'until docker exec apartments-mysql mysqladmin ping -h"127.0.0.1" --silent; do sleep 2; done'
                
                # Esperar a que MinIO esté listo
                echo "Esperando a MinIO..."
                timeout 60 bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 2; done'
                
                # Verificar que el bucket se haya creado correctamente
                echo "Verificando bucket de MinIO..."
                sleep 5
                
            - name: Set E2E environment variables
              run: |
                echo "DATABASE_URL=jdbc:mysql://localhost:3303/apartmentsdb" >> $GITHUB_ENV
                echo "DATABASE_USERNAME=user" >> $GITHUB_ENV
                echo "DATABASE_PASSWORD=password" >> $GITHUB_ENV
                echo "MINIO_URL=http://localhost:9000" >> $GITHUB_ENV
                echo "MINIO_ACCESS_KEY=minioadmin" >> $GITHUB_ENV
                echo "MINIO_SECRET_KEY=minioadmin" >> $GITHUB_ENV
                echo "MINIO_BUCKET=apartments-images" >> $GITHUB_ENV
                
            - name: Run Backend E2E Tests
              run: mvn test -Dtest='*e2eTest'
              env:
                SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3303/apartmentsdb
                SPRING_DATASOURCE_USERNAME: user
                SPRING_DATASOURCE_PASSWORD: password
                MINIO_URL: http://localhost:9000
                MINIO_ACCESS_KEY: minioadmin
                MINIO_SECRET_KEY: minioadmin
                MINIO_BUCKET_NAME: apartments-images
                
            - name: Show service logs on failure
              if: failure()
              run: |
                cd ..
                echo "=== MySQL logs ==="
                docker logs apartments-mysql
                echo "=== MinIO logs ==="
                docker logs apartments-minio
                echo "=== MinIO init logs ==="
                docker logs apartments-minio-init
                
            - name: Stop services
              if: always()
              run: |
                cd ..
                docker-compose down -v


    frontend-integration:
        name: Frontend Integration Quality Check
        runs-on: ubuntu-latest
        services:
          mysql:
            image: mysql:8
            env:
              MYSQL_ROOT_PASSWORD: root
              MYSQL_DATABASE: skyapartments
              MYSQL_USER: user
              MYSQL_PASSWORD: pass
            ports:
              - 3306:3306
            options: >-
              --health-cmd="mysqladmin ping --silent"
        
        steps:
          - uses: actions/checkout@v4
          
          # Backend
          - name: Set up JDK
            uses: actions/setup-java@v4
            with:
              java-version: 17
              distribution: temurin

          - name: Build backend
            working-directory: backend
            run: mvn clean package -DskipTests

          - name: Wait for MySQL
            run: |
                echo "Waiting for MySQL to be ready..."
                for i in {1..30}; do
                if mysql -h 127.0.0.1 -uuser -ppass -e "SHOW DATABASES;" > /dev/null 2>&1; then
                    echo "MySQL is ready!"
                    break
                fi
                echo "MySQL not ready yet..."
                sleep 2
                done

          - name: Run apartment
            working-directory: backend/apartment
            env:
                SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/skyapartments
                SPRING_DATASOURCE_USERNAME: user
                SPRING_DATASOURCE_PASSWORD: pass
            run: nohup java -jar target/apartment-0.0.1-SNAPSHOT.jar &

          - name: Wait for backend
            run: |
              echo "Waiting for backend to start..."
              for i in {1..30}; do
                if nc -z localhost 8080; then
                  echo "Backend is up!"
                  break
                fi
                echo "Backend not ready yet..."
                sleep 2
              done
          
          # Frontend
          - name: Set up Node
            uses: actions/setup-node@v4
            with:
              node-version: 20

          - name: Install frontend dependencies
            working-directory: frontend
            run: npm ci

          - name: Run integration tests
            working-directory: frontend
            run: npm run test:integration

    frontend-unit-e2e:
        name: Frontend Unit and E2E Quality Check
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./frontend
        steps:
            - uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                node-version: '20'

            - name: Install Dependencies
              run: npm install

            - name: Run Frontend Unit Tests
              run: npm run test:unit

            - name: Install Playwright Browsers
              run: npx playwright install

            - name: Start Frontend Server
              run: npm run start &
              
            - name: Wait for server to be ready
              run: |
                npx wait-on http://localhost:4200  

            - name: Run Frontend E2E Tests
              run: npm run test:e2e